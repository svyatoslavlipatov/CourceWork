import random
import telebot
import webbrowser
import json
from telebot import types

# –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
file = open('./token.txt')
mytoken = file.read()
# –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞
bot = telebot.TeleBot(mytoken)

current_section = None

# –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –¥–ª—è –±–æ—Ç–∞
answers = ['–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å.',
           '–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é.',
           '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.',
           '–£–≤—ã, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏... >_<'
           ]

# ------- –ö–Ω–æ–ø–∫–∏ -------
start_btns = {
    'catalog': 'üõç –ö–∞—Ç–∞–ª–æ–≥',
    'about': 'üõà –û –Ω–∞—Å',
    'faqs': 'üìÑ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã'
}

about_btns = {
    'number': 'üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
    'address': 'üó∫Ô∏è –ê–¥—Ä–µ—Å'
}

faq_btns = {
    '–Ø–≤–ª—è—é—Ç—Å—è –ª–∏ –æ—Ä—É–∂–∏–µ–º —Ç–æ–≤–∞—Ä—ã?':  'C–æ–≥–ª–∞—Å–Ω–æ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É <i>"–û–± –æ—Ä—É–∂–∏–∏" –æ—Ç 13.12.1996 N 150-–§–ó.</i>  —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ <b>–ù–ï –Ø–í–õ–Ø–Æ–¢–°–Ø –û–†–£–ñ–ò–ï–ú!</b> '
                                    'Airsoft - –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∞, —Å –¥—É–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π –º–µ–Ω–µ–µ 3–î–∂, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ —à–∞—Ä—ã - 6–º–º.',
    '–ü–æ—á–µ–º—É –Ω–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –ª—É—á—à–∏–µ?': '–ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –∫—Ä—É—Ç—ã–µ!'
}

back_btns = {
    'back': '‚Ü©Ô∏è –ù–∞–∑–∞–¥',
    'back_catalog': '‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥',
    'back_home': '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'
}

buy_btns = {
    'buy': '–ö—É–ø–∏—Ç—å',
    'cart': 'üõí –ö–æ—Ä–∑–∏–Ω–∞',
    'add_to_cart': 'üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'
}


# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
goods_btns = {
    'drives': '–ü—Ä–∏–≤–æ–¥–∞',
    'sights': '–ü—Ä–∏—Ü–µ–ª—ã',
    'girboxes': '–ì–∏—Ä–±–æ–∫—Å—ã',
    'gas': '–ì–∞–∑',
    'launchers': '–ü—É—Å–∫–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
    'gears': '–®–µ—Å—Ç–µ—Ä–Ω–∏',
    'hopup_nodes':'–£–∑–ª—ã —Ö–æ–ø-–∞–ø'
}

# ------- –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ -------

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
def random_answer(message):
    bot.send_message(message.chat.id, answers[random.randint(0, 3)])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
def create_markup(buttons):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for row in buttons:
        markup.row(*row)
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
def create_buttons_for_product():
    return [
        [buy_btns['add_to_cart']],
        [buy_btns['cart']],
        [back_btns['back'], back_btns['back_catalog']],
        [back_btns['back_home']]
    ]

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
def add_buttons_to_markup(button_dict, max_buttons_per_row):
    buttons = []
    row = []
    for btn_key, btn_text in button_dict.items():
        row.append(btn_text)
        if len(row) == max_buttons_per_row:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return buttons

# ------- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ -------

# –ü—Ä–∏–≤–æ–¥–∞
def create_drive(name, pic, price, brand, gearbox_version, weight, overall_length, folded_length, inner_barrel_length, initial_velocity, caliber, completeness):
    return {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": name,
        "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": pic,
        "—Ü–µ–Ω–∞": price,
        "–±—Ä–µ–Ω–¥": brand,
        "–≤–µ—Ä—Å–∏—è –≥–∏—Ä–±–æ–∫—Å–∞": gearbox_version,
        "–≤–µ—Å": weight,
        "–¥–ª–∏–Ω–∞ –æ–±—â–∞—è": overall_length,
        "–¥–ª–∏–Ω–∞ —Å–æ —Å–ª–æ–∂–µ–Ω–Ω—ã–º –ø—Ä–∏–∫–ª–∞–¥–æ–º": folded_length,
        "–¥–ª–∏–Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å—Ç–≤–æ–ª–∏–∫–∞": inner_barrel_length,
        "–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 0,2 —à–∞—Ä–æ–º": initial_velocity,
        "–∫–∞–ª–∏–±—Ä": caliber,
        "–∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å": completeness
    }

# –ü—Ä–∏—Ü–µ–ª—ã
def create_sight(name, pic, price, brand, description):
    return {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": name,
        "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": pic,
        "—Ü–µ–Ω–∞": price,
        "–±—Ä–µ–Ω–¥": brand,
        "–æ–ø–∏—Å–∞–Ω–∏–µ": description
    }

# –ì–∞–∑
def create_gas(name, pic, price, brand, volume):
    return {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": name,
        "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": pic,
        "—Ü–µ–Ω–∞": price,
        "–±—Ä–µ–Ω–¥": brand,
        "–æ–±—ä—ë–º": volume
    }

# –ì–∏—Ä–±–æ–∫—Å—ã
def create_girbox(name, pic, price, brand, material, description):
    return {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": name,
        "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": pic,
        "—Ü–µ–Ω–∞": price,
        "–±—Ä–µ–Ω–¥": brand,
        "–º–∞—Ç–µ—Ä–∏–∞–ª": material,
        "–æ–ø–∏—Å–∞–Ω–∏–µ": description
    }

# –ü—É—Å–∫–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
def create_launcher(name, pic, price, brand, material, description):
    return {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": name,
        "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": pic,
        "—Ü–µ–Ω–∞": price,
        "–±—Ä–µ–Ω–¥": brand,
        "–º–∞—Ç–µ—Ä–∏–∞–ª": material,
        "–æ–ø–∏—Å–∞–Ω–∏–µ": description
    }

# –•–æ–ø-–∞–ø—ã
def create_hopup_node(name, pic, price, brand, material, description):
    return {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": name,
        "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": pic,
        "—Ü–µ–Ω–∞": price,
        "–±—Ä–µ–Ω–¥": brand,
        "–º–∞—Ç–µ—Ä–∏–∞–ª": material,
        "–æ–ø–∏—Å–∞–Ω–∏–µ": description
    }

# –®–µ—Å—Ç–µ—Ä–Ω–∏
def create_gear(name, pic, price, brand, material, description):
    return {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": name,
        "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": pic,
        "—Ü–µ–Ω–∞": price,
        "–±—Ä–µ–Ω–¥": brand,
        "–º–∞—Ç–µ—Ä–∏–∞–ª": material,
        "–æ–ø–∏—Å–∞–Ω–∏–µ": description
    }

# ------- –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ -------


# ------- –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON -------

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–≤–æ–¥–∞—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
def load_products_from_file(file_path, create_function):
    with open(file_path, 'r', encoding='utf-8') as file:
        products_data = json.load(file)
    return [create_function(**product) for product in products_data]

drives_list = load_products_from_file('catalog/drives/drives_data.json', create_drive)
sights_list = load_products_from_file('catalog/sights/sights_data.json', create_sight)
gas_list = load_products_from_file('catalog/gas/gas_data.json', create_gas)
girboxes_list = load_products_from_file('catalog/girboxes/girboxes_data.json', create_girbox)
launchers_list = load_products_from_file('catalog/launchers/launchers_data.json', create_launcher)
hopup_nodes_list = load_products_from_file('catalog/hopup_nodes/hopup_nodes_data.json', create_hopup_node)
gears_list = load_products_from_file('catalog/gears/gears_data.json', create_gear)
# ------- –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON -------


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def welcome(message):
    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ /start
    buttons = [
        [start_btns['catalog']],
        [buy_btns['cart']],
        [start_btns['about'], start_btns['faqs']],
    ]
    markup = create_markup(buttons)

    if message.text == '/start':
        # –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n –í –Ω–∞—à–µ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π "FRW - Fire Rabbit Workshop" —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –¥–ª—è —Å—Ç—Ä–∞–π–∫–±–æ–ª–∞!\n –í–ö –º–æ–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞: https://vk.com/petrucho_t', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏ —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
@bot.message_handler(content_types=['photo', 'sticker', 'audio'])
def get_photo(message):
    bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ :(')


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
last_displayed_products = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
carts = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
@bot.message_handler(func=lambda message: message.text == buy_btns.get('add_to_cart'))
def inquire_about_product(message):
    user_id = message.chat.id
    if user_id in last_displayed_products:
        selected_product = last_displayed_products[user_id]
        if user_id not in carts:
            carts[user_id] = []  # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
        cart_item = {"–Ω–∞–∑–≤–∞–Ω–∏–µ": selected_product["–Ω–∞–∑–≤–∞–Ω–∏–µ"], "—Ü–µ–Ω–∞": selected_product["—Ü–µ–Ω–∞"]}
        carts[user_id].append(cart_item)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        bot.send_message(message.chat.id, f'–¢–æ–≤–∞—Ä "{selected_product["–Ω–∞–∑–≤–∞–Ω–∏–µ"]}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.')
        print(carts)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–æ—Ä–∑–∏–Ω–∞"
@bot.message_handler(func=lambda message: message.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞')
def show_cart(message):
    buttons = [
        [buy_btns['buy']],
        [back_btns['back_home']]
    ]
    markup = create_markup(buttons)
    user_id = message.chat.id
    if user_id in carts:
        cart_items = carts[user_id]
        if cart_items:
            response = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
            for i, item in enumerate(cart_items, start=1):
                response += f'{i}. –ù–∞–∑–≤–∞–Ω–∏–µ: {item["–Ω–∞–∑–≤–∞–Ω–∏–µ"]}, –¶–µ–Ω–∞: {item["—Ü–µ–Ω–∞"]}\n'
            response += "\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä."
            bot.send_message(message.chat.id, response, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",  reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",  reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@bot.message_handler(func=lambda message: message.text.isdigit() and int(message.text) > 0 and message.chat.id in carts)
def remove_item_from_cart(message):
    user_id = message.chat.id
    item_number = int(message.text)
    cart_items = carts[user_id]
    if 1 <= item_number <= len(cart_items):
        removed_item = cart_items.pop(item_number - 1)
        bot.send_message(message.chat.id, f'–¢–æ–≤–∞—Ä "{removed_item["–Ω–∞–∑–≤–∞–Ω–∏–µ"]}" —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')
        show_cart(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
@bot.message_handler(func=lambda message: message.text == buy_btns['buy'])
def buy_product(message):
    user_id = message.chat.id
    if user_id in carts:
        cart_items = carts[user_id]
        if cart_items:
            response = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
            cart_text = ""
            for i, item in enumerate(cart_items, start=1):
                cart_text += f'{i}. –¢–æ–≤–∞—Ä: {item["–Ω–∞–∑–≤–∞–Ω–∏–µ"]}, –¶–µ–Ω–∞: {item["—Ü–µ–Ω–∞"]}\n'
            response += f'<code>{cart_text}</code>'
            response += "\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è) –∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ: <a href='https://t.me/liipkka'>–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram</a>"
            bot.send_message(message.chat.id, response, parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")



# ------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä  -------
# –ü—Ä–∏–≤–æ–¥—ã
@bot.message_handler(func=lambda message: message.text in [drive["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for drive in drives_list])
def handle_drive_selection(message):
    selected = next(drive for drive in drives_list if drive["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == message.text)
    last_displayed_products[message.chat.id] = selected
    photo = open(selected["–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"], 'rb')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    caption = f''' –ù–∞–∑–≤–∞–Ω–∏–µ: {selected["–Ω–∞–∑–≤–∞–Ω–∏–µ"]}
–¶–µ–Ω–∞: {selected["—Ü–µ–Ω–∞"]}
–ë—Ä–µ–Ω–¥: {selected["–±—Ä–µ–Ω–¥"]}
–í–µ—Ä—Å–∏—è –≥–∏—Ä–±–æ–∫—Å–∞: {selected["–≤–µ—Ä—Å–∏—è –≥–∏—Ä–±–æ–∫—Å–∞"]}
–í–µ—Å: {selected["–≤–µ—Å"]}
–î–ª–∏–Ω–∞ –æ–±—â–∞—è: {selected["–¥–ª–∏–Ω–∞ –æ–±—â–∞—è"]}
–î–ª–∏–Ω–∞ —Å–æ —Å–ª–æ–∂–µ–Ω–Ω—ã–º –ø—Ä–∏–∫–ª–∞–¥–æ–º: {selected["–¥–ª–∏–Ω–∞ —Å–æ —Å–ª–æ–∂–µ–Ω–Ω—ã–º –ø—Ä–∏–∫–ª–∞–¥–æ–º"]}
–î–ª–∏–Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å—Ç–≤–æ–ª–∏–∫–∞: {selected["–¥–ª–∏–Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å—Ç–≤–æ–ª–∏–∫–∞"]}
–ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 0,2 —à–∞—Ä–æ–º: {selected["–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 0,2 —à–∞—Ä–æ–º"]}
–ö–∞–ª–∏–±—Ä: {selected["–∫–∞–ª–∏–±—Ä"]}
–ö–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å: {selected["–∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å"]}

–ù–ï –Ø–í–õ–Ø–ï–¢–°–Ø –û–†–£–ñ–ò–ï–ú!
–°–æ–≥–ª–∞—Å–Ω–æ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É "–û–± –æ—Ä—É–∂–∏–∏" –æ—Ç 13.12.1996 N 150-–§–ó. Airsoft - –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∞, —Å –¥—É–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π –º–µ–Ω–µ–µ 3–î–∂, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ —à–∞—Ä—ã - 6–º–º.
'''
    bot.send_photo(message.chat.id, photo, caption=caption)
    photo.close()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = create_buttons_for_product()

    markup = create_markup(buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –ü—Ä–∏—Ü–µ–ª—ã
@bot.message_handler(func=lambda message: message.text in [sight["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for sight in sights_list])
def handle_sight_selection(message):
    selected = next(sight for sight in sights_list if sight["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == message.text)
    last_displayed_products[message.chat.id] = selected
    photo = open(selected["–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"], 'rb')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    caption = f''' –ù–∞–∑–≤–∞–Ω–∏–µ: {selected["–Ω–∞–∑–≤–∞–Ω–∏–µ"]}
–¶–µ–Ω–∞: {selected["—Ü–µ–Ω–∞"]}
–ë—Ä–µ–Ω–¥: {selected["–±—Ä–µ–Ω–¥"]}
–ö–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å: {selected["–æ–ø–∏—Å–∞–Ω–∏–µ"]}
'''
    bot.send_photo(message.chat.id, photo, caption=caption)
    photo.close()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = create_buttons_for_product()

    markup = create_markup(buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –ì–∞–∑
@bot.message_handler(func=lambda message: message.text in [gas["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for gas in gas_list])
def handle_gas_selection(message):
    selected = next(gas for gas in gas_list if gas["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == message.text)
    last_displayed_products[message.chat.id] = selected
    photo = open(selected["–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"], 'rb')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    caption = f''' –ù–∞–∑–≤–∞–Ω–∏–µ: {selected["–Ω–∞–∑–≤–∞–Ω–∏–µ"]}
–¶–µ–Ω–∞: {selected["—Ü–µ–Ω–∞"]}
–ë—Ä–µ–Ω–¥: {selected["–±—Ä–µ–Ω–¥"]}
–ö–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å: {selected["–æ–±—ä—ë–º"]}
'''
    bot.send_photo(message.chat.id, photo, caption=caption)
    photo.close()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = create_buttons_for_product()

    markup = create_markup(buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def add_easy_selections(message, product, buttons):
    photo = open(product["–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"], 'rb')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    caption = f''' –ù–∞–∑–≤–∞–Ω–∏–µ: {product["–Ω–∞–∑–≤–∞–Ω–∏–µ"]}
–¶–µ–Ω–∞: {product["—Ü–µ–Ω–∞"]}
–ë—Ä–µ–Ω–¥: {product["–±—Ä–µ–Ω–¥"]}
–ú–∞—Ç–µ—Ä–∏–∞–ª: {product["–º–∞—Ç–µ—Ä–∏–∞–ª"]}
–û–ø–∏—Å–∞–Ω–∏–µ: {product["–æ–ø–∏—Å–∞–Ω–∏–µ"]}
'''
    bot.send_photo(message.chat.id, photo, caption=caption)
    photo.close()

    markup = create_markup(buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
def handle_product_selection(message, product_list):
    selected = next((product for product in product_list if product["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == message.text), None)
    last_displayed_products[message.chat.id] = selected
    if selected:
        buttons = create_buttons_for_product()
        add_easy_selections(message, selected, buttons)

@bot.message_handler(func=lambda message: message.text in [product["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for product in girboxes_list])
def handle_girbox_selection(message):
    handle_product_selection(message, girboxes_list)

@bot.message_handler(func=lambda message: message.text in [product["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for product in launchers_list])
def handle_launcher_selection(message):
    handle_product_selection(message, launchers_list)

@bot.message_handler(func=lambda message: message.text in [product["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for product in hopup_nodes_list])
def handle_hopup_node_selection(message):
    handle_product_selection(message, hopup_nodes_list)

@bot.message_handler(func=lambda message: message.text in [product["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for product in gears_list])
def handle_gear_selection(message):
    handle_product_selection(message, gears_list)

# ------- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä  -------

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥, –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ –∫–Ω–æ–ø–∫–∞—Ö
@bot.message_handler(func=lambda message: True)
def info(message):
    if message.text == start_btns.get('catalog'):
        goodsChapter(message)

    elif message.text == start_btns.get('about'):
        aboutUs(message)

    elif message.text == start_btns.get('faqs'):
        faqAnswer(message)

    elif message.text == about_btns.get('number'):
        bot.send_message(message.chat.id,'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> 7 (924) 834-88-86', parse_mode='html')

    elif message.text == about_btns.get('address'):
        bot.send_message(message.chat.id,'<b>–ê–¥—Ä–µ—Å:</b> –ò—Ä–∫—É—Ç—Å–∫, –î–µ–∫–∞–±—Ä—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π, 102', parse_mode='html')

    elif message.text == goods_btns.get('drives'):
        drives_category(message)

    elif message.text == goods_btns.get('sights'):
        sights_category(message)

    elif message.text == goods_btns.get('gas'):
        gas_category(message)

    elif message.text == goods_btns.get('girboxes'):
        girboxes_category(message)

    elif message.text == goods_btns.get('launchers'):
        launchers_category(message)

    elif message.text == goods_btns.get('hopup_nodes'):
        hopup_nodes_category(message)

    elif message.text == goods_btns.get('gears'):
        gears_category(message)

    elif message.text == buy_btns.get('buy'):
        webbrowser.open('')

    # elif message.text == buy_btns.get('add_to_cart'):
    #     bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.")

    elif message.text == back_btns.get('back'):
        if current_section:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∫–æ–º-—Ç–æ —Ä–∞–∑–¥–µ–ª–µ –∫–∞—Ç–∞–ª–æ–≥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            if current_section == "drives":
                drives_category(message)
            elif current_section == "sights":
                sights_category(message)
            elif current_section == "gas":
                gas_category(message)
            elif current_section == "girboxes":
                girboxes_category(message)
            elif current_section == "launchers":
                launchers_category(message)
            elif current_section == "hopup_nodes":
                hopup_nodes_category(message)
            elif current_section == "gears":
                gears_category(message)
        else:
            goodsChapter(message)

    elif message.text in faq_btns:
        text = f'{faq_btns[message.text]}'
        bot.send_message(message.chat.id, text, parse_mode='html')

    elif message.text == back_btns.get('back_catalog'):
        goodsChapter(message)

    elif message.text == back_btns.get('back_home'):
        welcome(message)

    else:
        random_answer(message)

# ----- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ ------
def display_category(message, product_list, category_name):
    max_buttons_per_row = 2
    buttons = add_buttons_to_markup({product["–Ω–∞–∑–≤–∞–Ω–∏–µ"]: product["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for product in product_list}, max_buttons_per_row)
    buttons.append([back_btns['back_catalog'], back_btns['back_home']])
    markup = create_markup(buttons)
    bot.send_message(message.chat.id, f'–†–∞–∑–¥–µ–ª {category_name}:', reply_markup=markup)

def set_current_section_and_display_category(message, section_name, product_list, category_name):
    global current_section
    current_section = section_name
    display_category(message, product_list, category_name)

def drives_category(message):
    set_current_section_and_display_category(message, "drives", drives_list, "AIRSOFT –ø—Ä–∏–≤–æ–¥–æ–≤ (–ú–æ–¥–µ–ª–∏ —Å—Ç—Ä–∞–π–∫–±–æ–ª—å–Ω–æ–≥–æ ¬´–æ—Ä—É–∂–∏—è¬ª)")

def sights_category(message):
    set_current_section_and_display_category(message, "sights", sights_list, "–ø—Ä–∏—Ü–µ–ª–æ–≤")

def gas_category(message):
    set_current_section_and_display_category(message, "gas", gas_list, "–≥–∞–∑–∞")

def girboxes_category(message):
    set_current_section_and_display_category(message, "girboxes", girboxes_list, "–≥–∏—Ä–±–æ–∫—Å–æ–≤")

def launchers_category(message):
    set_current_section_and_display_category(message, "launchers", launchers_list, "–ø—É—Å–∫–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

def hopup_nodes_category(message):
    set_current_section_and_display_category(message, "hopup_nodes", hopup_nodes_list, "—É–∑–ª–æ–≤ —Ö–æ–ø-–∞–ø–æ–≤")

def gears_category(message):
    set_current_section_and_display_category(message, "gears", gears_list, "—à–µ—Å—Ç–µ—Ä–Ω–µ–π")

# ----- –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ ------

# –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Ä–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–æ–≤
def goodsChapter(message):
    max_buttons_per_row = 3
    buttons = add_buttons_to_markup(goods_btns, max_buttons_per_row)
    buttons.append([back_btns['back_home']])
    markup = create_markup(buttons)
    bot.send_message(message.chat.id, "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Ä–∞–∑–¥–µ–ª –æ –Ω–∞—Å
def aboutUs(message):
    buttons = [
        [about_btns['number'], about_btns['address']],
        [back_btns['back_home']]
    ]
    markup = create_markup(buttons)
    bot.send_message(message.chat.id, '–†–∞–∑–¥–µ–ª "–û –Ω–∞—Å".\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å.', reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Ä–∞–∑–¥–µ–ª –æ –Ω–∞—Å
def faqAnswer(message):
    buttons = []
    row = []
    for btn_key in faq_btns:
        row.append(btn_key)
        if len(row) == 3:  # –ö–æ–≥–¥–∞ –≤ —Ä—è–¥—É —É–∂–µ —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç —Ä—è–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
            buttons.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–ø–æ–ª–Ω—ã–π —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        buttons.append(row)
    buttons.append([back_btns['back_home']])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
    markup = create_markup(buttons)
    bot.send_message(message.chat.id, '–†–∞–∑–¥–µ–ª "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã".\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.', reply_markup=markup)

# –°—Ç—Ä–æ—á–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∞—Å—å
bot.polling(none_stop=True)